/*
 * ContactListRenderer.java
 *
 * Created on 15 April 2008, 16:26
 */

package xmppclient;

import java.awt.Color;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smackx.packet.VCard;

/**
 *
 * @author  Lee Boynton (323326)
 */
public class ContactListRenderer extends javax.swing.JPanel implements ListCellRenderer {
    
    private XMPPClientUI clientUI;
    
    /** Creates new form ContactListRenderer */
    public ContactListRenderer() {
        initComponents();
    }
    
    public ContactListRenderer(XMPPClientUI clientUI)
    {
        this.clientUI = clientUI;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nicknameLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 4, 3, 4));
        setMaximumSize(new java.awt.Dimension(32767, 28));
        setOpaque(false);

        nicknameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/status_online.png"))); // NOI18N
        nicknameLabel.setText("user");

        statusLabel.setText("status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nicknameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(nicknameLabel)
                .addComponent(statusLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    public Component getListCellRendererComponent(JList list, 
            Object object, 
            int index, 
            boolean isSelected, 
            boolean cellHasFocus)
    {
        Presence presence;
        VCard vCard = new VCard();
        
        if(object instanceof RosterEntry == false) return this;
        
        RosterEntry rosterEntry = (RosterEntry)object;
        
        nicknameLabel.setText(rosterEntry.getUser());

        if(rosterEntry.getName() != null)
        {
            nicknameLabel.setText(rosterEntry.getName());
        }
        else
        {
            try
            {
                vCard.load(XMPPClientUI.connection, rosterEntry.getUser());
                if(vCard.getNickName() != null)
                    nicknameLabel.setText(vCard.getNickName());
            }
            catch (XMPPException ex) {}
        }
        
        presence = XMPPClientUI.connection.getRoster().getPresence(rosterEntry.getUser());
                
        if(presence.getStatus() != null)
        {
            statusLabel.setText("(" + presence.getStatus() + ")");
        }
        else statusLabel.setText("");
        
        setOpaque(false);
        nicknameLabel.setIcon(getUserIcon(XMPPClientUI.connection.getRoster().getPresence(rosterEntry.getUser())));
        
        if(isSelected)
        {
            setBackground( new Color(240,240,240));
            setOpaque(true);
        }
        if(cellHasFocus) 
        {
            setBackground( new Color(220,220,220));
            setOpaque(true);
        }

        return this;
    }
    
    private ImageIcon getUserIcon(Presence presence)
    {
        if(presence.getMode() == Presence.Mode.dnd)
        {
            return new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/status_busy.png"));
        }
        if(!presence.isAvailable())
        {
            return new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/status_offline.png"));
        }
        if(presence.isAway())
        {
            return new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/status_away.png"));
        }

        return new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/status_online.png"));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel nicknameLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}

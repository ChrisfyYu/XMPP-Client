/*
 * XMPPClient.java
 *
 * Created on 04 May 2008, 17:49
 */
package xmppclient;

import java.awt.Graphics;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.XMPPConnection;

/**
 * Contains the main method for starting the application.
 * Shows the main login JFrame.
 * @author  Lee Boynton (323326)
 */
public class XMPPClient extends javax.swing.JFrame
{
    private XMPPConnection XMPPConnection;
    private ImageIcon icon = new ImageIcon(getClass().getResource("images/bg.jpg"));
    private static boolean DEBUG = false;

    /** Creates new form XMPPClient */
    public XMPPClient()
    {
        XMPPConnection.DEBUG_ENABLED = DEBUG;

        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex)
        {
            System.out.println("Unable to use system look and feel");
        }

        initComponents();

        Connection defaultConnection = new Connection();
        storedConnectionComboBox.addItem(defaultConnection);
        storedConnectionComboBox.setSelectedItem(defaultConnection);
        usernameTextField.requestFocus();
        validateInputs();
        getRootPane().setDefaultButton(signInButton);
    }

    /**
     * Gets the XMPPConnection instance
     * @return The XMPPConnection
     */
    public XMPPConnection getXMPPConnection()
    {
        return XMPPConnection;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                //  Dispaly image at at full size
                //g.drawImage(icon.getImage(), 0, 0, null);

                //  Scale image to size of component
                //Dimension d = getSize();
                //g.drawImage(icon.getImage(), 0, 0, d.width, d.height, null);

                //  Fix the image position in the scroll pane
                //Point p = scrollPane.getViewport().getViewPosition();
                //g.drawImage(icon.getImage(), p.x, p.y, null);

                super.paintComponent(g);
            }
        };//);
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        resourceLabel = new javax.swing.JLabel();
        hostLabel = new javax.swing.JLabel();
        storedConnectionComboBox = new javax.swing.JComboBox(Utils.getConnections().toArray());
        usernameTextField = new javax.swing.JTextField();
        resourceTextField = new javax.swing.JTextField();
        hostTextField = new javax.swing.JTextField();
        storeConnectionCheckBox = new javax.swing.JCheckBox();
        passwordTextField = new javax.swing.JPasswordField();
        portTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        connectionLabel = new javax.swing.JLabel();
        signInButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        registerMenuItem = new javax.swing.JMenuItem();
        accountManagerMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XMPPClient");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setName("XMPPClientFrame"); // NOI18N
        setResizable(false);

        containerPanel.setOpaque(false);

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        resourceLabel.setText("Resource");

        hostLabel.setText("Host");

        storedConnectionComboBox.setFont(storedConnectionComboBox.getFont());
        storedConnectionComboBox.setToolTipText("Select a previously stored connection, or select new connection to create a new connection");
        storedConnectionComboBox.setFocusable(false);
        storedConnectionComboBox.setOpaque(false);
        storedConnectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storedConnectionComboBoxActionPerformed(evt);
            }
        });

        usernameTextField.setToolTipText("<html>\n<p>Enter your username for the XMPP connection</p>\n</html>");
        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyReleased(evt);
            }
        });

        resourceTextField.setText("Home");
        resourceTextField.setToolTipText("Enter the resource, or leave as default");

        hostTextField.setToolTipText("Enter the server IP address or host name");
        hostTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hostTextFieldKeyReleased(evt);
            }
        });

        storeConnectionCheckBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        storeConnectionCheckBox.setText("Save connection");
        storeConnectionCheckBox.setToolTipText("<html>If this checkbox is selected, upon a successful login<br>\n the connection details (except password) will be stored to<br>\nmake future logins quicker.</html>");
        storeConnectionCheckBox.setBorder(null);
        storeConnectionCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        storeConnectionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeConnectionCheckBoxActionPerformed(evt);
            }
        });

        passwordTextField.setText("password");
        passwordTextField.setToolTipText("Enter your password for the XMPP connection");
        passwordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordTextFieldKeyReleased(evt);
            }
        });

        portTextField.setText("5222");
        portTextField.setToolTipText("Set the port number or leave as default");
        portTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                portTextFieldKeyReleased(evt);
            }
        });

        portLabel.setText("Port");

        nameLabel.setText("Name:");

        nameTextField.setToolTipText("<html>\n<p>Give a name to the connection. This name will be used in the connection drop down box.</p>\n</html>");
        nameTextField.setEnabled(false);

        connectionLabel.setText("Connection");

        signInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/tango/go-next.png"))); // NOI18N
        signInButton.setText("Sign in");
        signInButton.setEnabled(false);
        signInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hostLabel)
                    .addComponent(resourceLabel)
                    .addComponent(passwordLabel)
                    .addComponent(usernameLabel)
                    .addComponent(connectionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerPanelLayout.createSequentialGroup()
                        .addComponent(hostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(resourceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(storedConnectionComboBox, 0, 176, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelLayout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(signInButton)
                .addGap(10, 10, 10))
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(storeConnectionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        containerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {connectionLabel, hostLabel, passwordLabel, resourceLabel, usernameLabel});

        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelLayout.createSequentialGroup()
                .addContainerGap(113, Short.MAX_VALUE)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionLabel)
                    .addComponent(storedConnectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resourceLabel)
                    .addComponent(resourceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signInButton)
                .addGap(70, 70, 70)
                .addComponent(storeConnectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        containerPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nameLabel, nameTextField, storeConnectionCheckBox});

        fileMenu.setText("File");

        registerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        registerMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/tango/list-add.png"))); // NOI18N
        registerMenuItem.setText("Register");
        registerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(registerMenuItem);

        accountManagerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        accountManagerMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/tango/network-server-22x22.png"))); // NOI18N
        accountManagerMenuItem.setText("Account manager");
        accountManagerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountManagerMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(accountManagerMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/tango/system-shutdown-22x22.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void storedConnectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storedConnectionComboBoxActionPerformed
    Connection connection = (Connection) storedConnectionComboBox.getSelectedItem();

    usernameTextField.setText(connection.getUsername());
    resourceTextField.setText(connection.getResource());
    hostTextField.setText(connection.getHost());
    portTextField.setText(connection.getPort());
    nameTextField.setText(connection.getName());
    validateInputs();
}//GEN-LAST:event_storedConnectionComboBoxActionPerformed

private void usernameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextFieldKeyReleased
    validateInputs();
}//GEN-LAST:event_usernameTextFieldKeyReleased

private void hostTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hostTextFieldKeyReleased
    validateInputs();
}//GEN-LAST:event_hostTextFieldKeyReleased

private void storeConnectionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeConnectionCheckBoxActionPerformed
    if (storeConnectionCheckBox.isSelected())
    {
        nameTextField.setEnabled(true);
        nameTextField.requestFocus();
        nameTextField.selectAll();
    }
    else
    {
        nameTextField.setEnabled(false);
    }
}//GEN-LAST:event_storeConnectionCheckBoxActionPerformed

private void passwordTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordTextFieldKeyReleased
    validateInputs();
}//GEN-LAST:event_passwordTextFieldKeyReleased

private void portTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portTextFieldKeyReleased
    validateInputs();
}//GEN-LAST:event_portTextFieldKeyReleased

private void signInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInButtonActionPerformed
    enableComponents(false);
    (new ConnectSwingWorker()).execute();
}//GEN-LAST:event_signInButtonActionPerformed

private void accountManagerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountManagerMenuItemActionPerformed
    new AccountManagerUI().setVisible(true);
}//GEN-LAST:event_accountManagerMenuItemActionPerformed

private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
    dispose();
}//GEN-LAST:event_exitMenuItemActionPerformed

private void registerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerMenuItemActionPerformed
    new RegistrationUI(this).setVisible(true);
}//GEN-LAST:event_registerMenuItemActionPerformed

    /**
     * @param args an argument of debug starts the program in debug mode
     */
    public static void main(final String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                if (args.length > 0 && args[0].equals("debug"))
                {
                     DEBUG = true;
                }
                
                new XMPPClient().setVisible(true);
            }
        });
    }

    private void storeConnection(boolean store) throws Exception
    {
        if (!store)
        {
            return;
        }
        Utils.saveConnection(usernameTextField.getText(),
                resourceTextField.getText(),
                hostTextField.getText(),
                portTextField.getText(),
                nameTextField.getText());
    }

    private void validateInputs()
    {
        signInButton.setEnabled(false);

        // validate lengths
        if (usernameTextField.getText().equals(""))
        {
            return;
        }
        if (passwordTextField.getPassword().length == 0)
        {
            return;
        }
        if (portTextField.getText().equals(""))
        {
            return;
        }
        if (hostTextField.getText().equals(""))
        {
            return;
        }
        try
        {
            Integer.parseInt(portTextField.getText());
        }
        catch (NumberFormatException ex)
        {
            return;
        }

        signInButton.setEnabled(true);
    }

    private void enableComponents(boolean enable)
    {
        storedConnectionComboBox.setEnabled(enable);
        usernameTextField.setEnabled(enable);
        resourceTextField.setEnabled(enable);
        portTextField.setEnabled(enable);
        hostTextField.setEnabled(enable);
        storeConnectionCheckBox.setEnabled(enable);
        passwordTextField.setEnabled(enable);
        signInButton.setEnabled(enable);

        if (enable)
        {
            signInButton.setText("Sign in");
        }
        else
        {
            signInButton.setText("Connecting");
        }
    }

    private class ConnectSwingWorker extends SwingWorker<XMPPConnection, Object>
    {
        @Override
        protected XMPPConnection doInBackground() throws Exception
        {
            ConnectionConfiguration config = new ConnectionConfiguration(
                    hostTextField.getText(),
                    Integer.parseInt(portTextField.getText()));

            XMPPConnection connection = new XMPPConnection(config);

            connection.connect();
            connection.login(usernameTextField.getText(),
                    new String(passwordTextField.getPassword()),
                    resourceTextField.getText());

            storeConnection(storeConnectionCheckBox.isSelected());

            return connection;
        }

        @Override
        protected void done()
        {
            try
            {
                new MainUI(get(), nameTextField.getText()).setVisible(true);
                XMPPClient.this.dispose();
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(XMPPClient.this,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                enableComponents(true);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem accountManagerMenuItem;
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JMenuItem registerMenuItem;
    private javax.swing.JLabel resourceLabel;
    private javax.swing.JTextField resourceTextField;
    private javax.swing.JButton signInButton;
    private javax.swing.JCheckBox storeConnectionCheckBox;
    private javax.swing.JComboBox storedConnectionComboBox;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}

/*
 * AudioLibraryUI.java
 *
 * Created on 25 May 2008, 17:00
 */
package xmppclient.audio.ui;

import xmppclient.audio.*;
import xmppclient.audio.packet.Audio;
import javax.swing.DefaultListModel;
import xmppclient.*;
import org.jivesoftware.smack.RosterEntry;
import xmppclient.audio.AudioManager;

/**
 *
 * @author  Lee Boynton (323326)
 */
public class AudioLibraryPanel extends javax.swing.JPanel implements AudioResponseListener
{
    private RosterEntry entry;
    private AudioManager manager;
    private AudioMessage response;
    private String show;

    /** Creates new form AudioLibraryUI */
    public AudioLibraryPanel(AudioManager manager, RosterEntry entry)
    {
        this.manager = manager;
        this.entry = entry;
        initComponents();
        manager.addResponseListener(this);
    }

    public void refresh()
    {
        manager.sendRequest(XMPPClientUI.connection.getRoster().getPresence(entry.getUser()).getFrom());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        audioList = new javax.swing.JList();
        artistButton = new javax.swing.JButton();
        albumButton = new javax.swing.JButton();
        allButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();

        audioList.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        audioList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                audioListMouseClicked(evt);
            }
        });
        audioList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                audioListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(audioList);

        artistButton.setText("Artist");
        artistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistButtonActionPerformed(evt);
            }
        });

        albumButton.setText("Album");
        albumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                albumButtonActionPerformed(evt);
            }
        });

        allButton.setText("<");
        allButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/tango/media-playback-start.png"))); // NOI18N
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/tango/media-playback-stop.png"))); // NOI18N
        stopButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(allButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(artistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(albumButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(artistButton)
                    .addComponent(albumButton)
                    .addComponent(allButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(playButton)
                        .addComponent(stopButton))
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void allButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allButtonActionPerformed
    showAll();
}//GEN-LAST:event_allButtonActionPerformed

private void artistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistButtonActionPerformed
    showArtist(artistButton.getText());
}//GEN-LAST:event_artistButtonActionPerformed

private void albumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_albumButtonActionPerformed
    showAlbum(albumButton.getText());
}//GEN-LAST:event_albumButtonActionPerformed

private void audioListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_audioListMouseClicked
    if (evt.getClickCount() == 2)
    {
        if (show.equals("artist"))
        {
            showAlbum((String) audioList.getSelectedValue());
        }
        else if (show.equals("all"))
        {
            showArtist((String) audioList.getSelectedValue());
        }
    }
}//GEN-LAST:event_audioListMouseClicked

private void audioListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_audioListValueChanged
    if (show.equals("album"))
    {
        playButton.setEnabled(true);
    }
}//GEN-LAST:event_audioListValueChanged

private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
    String name = (String) audioList.getSelectedValue();
    System.out.println("Attempting to play " + name);
}//GEN-LAST:event_playButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton albumButton;
    private javax.swing.JButton allButton;
    private javax.swing.JButton artistButton;
    private javax.swing.JList audioList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton playButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void audioResponse(final AudioMessage response)
    {
        this.response = response;
        showAll();
    }

    private void showAlbum(String album)
    {
        albumButton.setText(album);
        artistButton.setVisible(true);
        albumButton.setVisible(true);
        show = "album";

        DefaultListModel model = new DefaultListModel();
        Audio audio = response.getAudio();

        for (AudioFile file : audio.getAudioFiles())
        {
            if (file.getAlbum().equals(album))
            {
                model.addElement(file.getTrack() + ". " + file.getName());
            }
        }

        audioList.setModel(model);
    }

    private void showAll()
    {
        show = "all";
        artistButton.setVisible(false);
        albumButton.setVisible(false);
        DefaultListModel model = new DefaultListModel();
        Audio audio = response.getAudio();

        for (AudioFile file : audio.getAudioFiles())
        {
            if (!model.contains(file.getArtist()))
            {
                model.addElement(file.getArtist());
            }
        }

        audioList.setModel(model);
    }

    private void showArtist(String artist)
    {
        artistButton.setVisible(true);
        albumButton.setVisible(false);
        artistButton.setText(artist);
        show = "artist";

        DefaultListModel model = new DefaultListModel();
        Audio audio = response.getAudio();

        for (AudioFile file : audio.getAudioFiles())
        {
            if (file.getArtist().equals(artist) && !model.contains(file.getAlbum()))
            {
                model.addElement(file.getAlbum());
            }
        }

        audioList.setModel(model);
    }
}

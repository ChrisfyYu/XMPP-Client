/*
 * MultiUserChatUI.java
 *
 * Created on 09 May 2008, 15:22
 */
package xmppclient.chat;

import xmppclient.*;
import xmppclient.chat.MultiUserChatInviteUI;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.util.StringUtils;
import org.jivesoftware.smackx.Form;
import org.jivesoftware.smackx.muc.InvitationRejectionListener;
import org.jivesoftware.smackx.muc.MultiUserChat;
import org.jivesoftware.smackx.muc.SubjectUpdatedListener;

/**
 *
 * @author  Lee Boynton (323326)
 */
public class MultiUserChatUI extends javax.swing.JFrame implements PacketListener
{
    private MultiUserChat muc;

    /** Creates new form MultiUserChatUI */
    public MultiUserChatUI(String room)
    {
        muc = new MultiUserChat(XMPPClientUI.connection, room + "@conference.192.168.0.8");
        initComponents();
    }

    public void create(String nickname) throws XMPPException
    {
        muc.create(nickname);
        muc.sendConfigurationForm(new Form(Form.TYPE_SUBMIT));
        initialise();
    }

    public void join(String nickname) throws XMPPException
    {
        muc.join(nickname);
        initialise();
    }

    @Override
    public void setVisible(boolean b)
    {
        super.setVisible(b);
        pack();
        horizontalSplitPane.setDividerLocation(0.82);
        verticalSplitPane.setDividerLocation(0.75);
    }

    private void initialise()
    {
        updateOccupantList();
        muc.addMessageListener(this);
        muc.addParticipantListener(new ParticipantListener());
        muc.addInvitationRejectionListener(new InvitationRejectionListener()
        {
            @Override
            public void invitationDeclined(String invitee, String reason)
            {
                JOptionPane.showMessageDialog(MultiUserChatUI.this,
                        invitee + " rejected your invitation.\nReason: " + reason,
                        "Invitation rejected",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        });
        muc.addSubjectUpdatedListener(new SubjectUpdatedListener()
        {
            @Override
            public void subjectUpdated(String subject, String from)
            {
                ChatTextPaneStyledDocument doc = (ChatTextPaneStyledDocument) messageTextPane.getStyledDocument();
                doc.insertInfo("Room subject was changed by " + 
                        StringUtils.parseResource(from) + 
                        ". The subject is now " + 
                        subject + ".");
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        inviteButton = new javax.swing.JButton();
        subjectButton = new javax.swing.JButton();
        verticalSplitPane = new javax.swing.JSplitPane();
        horizontalSplitPane = new javax.swing.JSplitPane();
        messageScrollPane = new javax.swing.JScrollPane();
        messageTextPane = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        memberList = new javax.swing.JList()
        {
            public String getToolTipText(MouseEvent evt)
            {
                // Get item index
                int index = locationToIndex(evt.getPoint());

                // Get item
                String user = (String) getModel().getElementAt(index);

                StringBuilder text = new StringBuilder();
                text.append("<html>");
                text.append(muc.getOccupant(user).getJid());
                text.append("<br>");
                text.append("<strong>Affiliation: </strong>");
                text.append(muc.getOccupant(user).getAffiliation());
                text.append("<br>");
                text.append("<strong>Role: </strong>");
                text.append(muc.getOccupant(user).getRole());
                text.append("</html>");

                // Return the tool tip text
                return text.toString();
            }
        };//);
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sendTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(muc.getRoom() + " - Conference");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        inviteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/user_add.png"))); // NOI18N
        inviteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(inviteButton);

        subjectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xmppclient/images/page_white_text_width.png"))); // NOI18N
        subjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(subjectButton);

        verticalSplitPane.setBorder(null);
        verticalSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        horizontalSplitPane.setBorder(null);
        horizontalSplitPane.setOneTouchExpandable(true);

        messageScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        messageTextPane.setEditable(false);
        messageTextPane.setStyledDocument(new ChatTextPaneStyledDocument());
        messageScrollPane.setViewportView(messageTextPane);

        horizontalSplitPane.setLeftComponent(messageScrollPane);

        memberList.setCellRenderer(new MemberListRenderer());
        memberList.setMinimumSize(new java.awt.Dimension(85, 0));
        jScrollPane3.setViewportView(memberList);

        horizontalSplitPane.setRightComponent(jScrollPane3);

        verticalSplitPane.setLeftComponent(horizontalSplitPane);

        jPanel1.setMinimumSize(new java.awt.Dimension(0, 30));

        sendTextArea.setColumns(20);
        sendTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sendTextAreaKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(sendTextArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
            .addComponent(sendButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        verticalSplitPane.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(verticalSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verticalSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send()
    {
        String text = sendTextArea.getText().trim();

        if (text.length() == 0)
        {
            return;
        }
        try
        {
            muc.sendMessage(text);
            sendTextArea.setText("");
        }
        catch (XMPPException ex)
        {
            Logger.getLogger(MultiUserChatUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
    send();
}//GEN-LAST:event_sendButtonActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    int option = JOptionPane.showConfirmDialog(this,
            "Do you wish to leave the conference?",
            "Leaving Conference",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

    if (option == JOptionPane.YES_OPTION)
    {
        muc.leave();
        dispose();
    }
}//GEN-LAST:event_formWindowClosing

private void inviteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteButtonActionPerformed

    MultiUserChatInviteUI invite = new MultiUserChatInviteUI(this, true);
    String values[] = invite.showDialog();

    if (values[0] == null)
    {
        return;
    }
    muc.invite(values[0], values[1]);
}//GEN-LAST:event_inviteButtonActionPerformed

private void sendTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sendTextAreaKeyReleased

    if (evt.getKeyCode() == 10 && evt.getModifiersEx() == 64)
    {
        sendTextArea.append("\n");
        return;
    }
    if (evt.getKeyCode() == 10)
    {
        send();
    }
}//GEN-LAST:event_sendTextAreaKeyReleased

private void subjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectButtonActionPerformed
    String subject = JOptionPane.showInputDialog(this, "Enter new subject");
    
    if(subject == null) return;
    if(subject.equals("")) return;
    
    try
    {
//GEN-LAST:event_subjectButtonActionPerformed
        muc.changeSubject(subject);
    }
    catch (XMPPException ex)
    {
        JOptionPane.showMessageDialog(this, 
                "You are not allowed to change the subject", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
    }
}

    @Override
    public void processPacket(Packet packet)
    {
        Message message = (Message) packet;
        ChatTextPaneStyledDocument doc = (ChatTextPaneStyledDocument) messageTextPane.getStyledDocument();
        doc.insertUser(StringUtils.parseResource(message.getFrom()));
        doc.insertMessage(message.getBody());
        messageTextPane.setCaretPosition(doc.getLength());
    }

    private void updateOccupantList()
    {
        DefaultListModel model = null;

        model = new DefaultListModel();

        Iterator<String> occupants = muc.getOccupants();

        while (occupants.hasNext())
        {
            model.addElement(occupants.next());
        }

        memberList.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane horizontalSplitPane;
    private javax.swing.JButton inviteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList memberList;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTextPane messageTextPane;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea sendTextArea;
    private javax.swing.JButton subjectButton;
    private javax.swing.JSplitPane verticalSplitPane;
    // End of variables declaration//GEN-END:variables

    private class ParticipantListener implements PacketListener
    {
        @Override
        public void processPacket(Packet packet)
        {
            ChatTextPaneStyledDocument doc = (ChatTextPaneStyledDocument) messageTextPane.getStyledDocument();
            doc.insertInfo(StringUtils.parseResource(packet.getFrom()) + " joined");
            updateOccupantList();
        }
    }

    private class MemberListRenderer extends DefaultListCellRenderer
    {
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            lbl.setText(StringUtils.parseResource((String) value));
            return lbl;
        }
    }
}
